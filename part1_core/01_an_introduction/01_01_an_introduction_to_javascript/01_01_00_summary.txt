- '웹페이지에 생동감을 불어넣기 위해' 만들어진 프로그래밍 언어
==> 웹페이지를 보이는 contents의 변화와 사용자와의 상호작용(클릭, 드래그 등)을 위해 만들어진 언어이다.

- ECMAScript
==> 원래 "LiveScript"라는 이름으로 불렸지만, 당시 "Java"가 인기가 좋아서 마켓팅을 위해 "javaScript"라고 변경했다.
==> 추후 발전을 거듭해, ECMAScript라는 고유 명세(기술표준)를 갖춘 독립적인 언어가 되었다.

- Javascript engine : engine_codename ( browser )
    V8 ( chrome, Opera )
    SpiderMonkey ( Firefox )
    Trident ( IE version## )
    Chakra ( IE version## )
    SquirrelFish ( Safari )
==> javascript는 브라우저마다 고유한 engine(javascript를 실행시킴)이 존재한다.

- 엔진의 동작
    1. 엔진이 스크립트를 읽는다.(파싱)
    2. 읽어 들인 스크립트를 기계어로 전환한다.(컴파일)
    3. 기계어로 전환된 코드가 실행된다.

- 브라우저에서 할 수 있는 일 : 메모리나 CPU 같은 저수준 영역의 조작은 허용하지 않고, 웹페이지 조작, 클리이언트와 서버 상호작용에 관한 모든 일을 할 수 있습니다.
    1. 페이지에 새로운 HTML을 추가하거나 기존 HTML, 혹은 스타일 수정하기
    2. 마우스 클릭이나 포인터의 움직임, 키보드 키 눌림 등과 같은 사용자 행동에 반응하기
    3. 네트워크를 통해 원격 서버에 요청을 보내거나, 파일 다운로드, 업로드하기(AJAX나 COMET과 같은 기술 사용)
    4. 쿠키를 가져오거나 설정하기. 사용자에게 질문을 건네거나 메시지 보여주기
    5. 클라이언트 측에 데이터 저장하기(로컬 스토리지)
==> 브라우저(클라이언트) 수준에서 서버와 통신하는 일을 javascript로 개발할 수 있다.

- 브라우저에서 할 수 없는 일 : 보안을 위해 제약된 사항으로, 개인 정보에 접근하거나 사용자의 데이터를 손상하는 것은 불가능합니다.
    1. 웹페이지 내 스크립트는 디스크에 저장된 임의의 파일을 읽거나 쓰고, 복사하거나 실행할 때 제약을 받을 수 있습니다. 운영체제가 지원하는 기능을 브라우저가 직접 쓰지 못하게 막혀있기 때문입니다.
        모던 브라우저를 사용하면 파일을 다룰 순 있습니다. 하지만 접근은 제한되어 있습니다. 사용자가 브라우저 창에 파일을 ‘끌어다 두거나’ <input> 태그를 통해 파일을 선택할 때와 같이 특정 상황에서만 파일 접근을 허용합니다.
        카메라나 마이크 같은 디바이스와 상호 작용하려면 사용자의 명시적인 허가가 있어야 합니다. 자바스크립트가 활성화된 페이지라도 사용자 몰래 웹 카메라를 작동 시켜 수집한 정보를 국가안보국(NSA)과 같은 곳에 몰래 전송할 수 없습니다.
    2. 브라우저 내 탭과 창은 대개 서로의 정보를 알 수 없습니다. 그런데 자바스크립트를 사용해 한 창에서 다른 창을 열 때는 예외가 적용됩니다. 하지만 이 경우에도 도메인이나 프로토콜, 포트가 다르다면 페이지에 접근할 수 없습니다.
        이런 제약사항을 '동일 출처 정책(Same Origin Policy)'이라 부릅니다. 이 정책을 피하려면 두 페이지는 데이터 교환에 동의해야 하고, 동의와 관련된 특수한 자바스크립트 코드를 포함하고 있어야 합니다. 자세한 사항은 추후 학습하도록 하겠습니다.
        다시 한번 강조하지만, 이런 제약사항은 사용자의 보안을 위해 만들어졌습니다. http://anysite.com에서 받아온 페이지가 http://gmail.com에서 받아온 페이지 상의 정보에 접근해 중요한 개인정보를 훔치는 걸 막기 위함입니다.
    3. 자바스크립트를 이용하면 페이지를 생성한 서버와 쉽게 정보를 주고받을 수 있습니다. 하지만 타 사이트나 도메인에서 데이터를 받아오는 건 불가능합니다. 가능하다 할지라도 원격 서버에서 명확히 승인을 해줘야 합니다(HTTP 헤더 등을 이용). 이 역시 보안을 위해 만들어진 제약사항입니다.
        브라우저 환경 밖, 예를 들어 서버라면 이러한 제약은 존재하지 않을 것입니다. 다만, 모던 브라우저에선 추가 권한 허가를 요청하는 플러그인이나 익스텐션 설치가 허용됩니다.
==> 디스크에 저장된 파일 접근에 대한 제약으로 사용자 데이터 손상을 방지합니다.
==> 두 페이지의 데이터 교환은 '동일 출처 정책(Same Origin Policy)'을 통해 기본적으로 불가능합니다.
==> 특수한 자바스크립트 코드로 사용해 데이터 교환 동의를 설정한 후에야 가능해집니다.

- 자바스크립트의 강점
    1. HTML/CSS와 완전히 동합할 수 있다.
    2. 간단한 일은 간단하게 처리할 수 있게 해준다.
    3. 모든 주요 브라우저에서 지원하고, 기본 언어로 사용된다.
    4. 서버나 모바일 앱 등을 만드는 것도 가능하다.
==> javascript는 웹 생태계에서 프론트 뿐만 아니라 백엔드-서버 개발도 가능하도록 발전해왔습니다.

- 자바스크립트로 트랜스파일하는 언어
    1. CoffeeScript는 'syntactic sugar'로, 짧은 문법을 도입하여 명료하고 이해하기 쉬운 코드를 작성할 수 있다. Ruby 개발자들이 좋아한다.
    2. TypeScript는 '자료형의 명시화(strict data typing)'에 집중해 만든 언어로 Microsoft가 개발했다.
    3. Flow도 자료형을 강제하는데, TypeScript와는 다른 방식을 사용하고, Facebook이 개발했다.
    4. Dart는 모바일 앱과 같이 브라우저가 아닌 환경에서 동작하는 고유의 엔진을 가진 독자적인 언어로, Google이 개발했다.
==> javascript 문법에 추가적인 요구사항이 존재했고, 그러한 요구사항을 만족시키기 위해 새로운 언어들이 개발되었습니다.
==> TypeScript와 Flow는 '자료형의 명시화'에 집중해 만들어졌고 각각 Microsoft(TS)와 Facebook(Flow)에 의해 개발되었습니다.
==> Dart는 모바일 앱에도 동작하는 고유의 엔진을 독자 개발해 만들어진 언어로 Google에 의해 개발되었습니다.